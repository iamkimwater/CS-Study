# 배열 = array
# c언어에 존재
# 연속적인 메모리 공간에 원소의 값들이 저장된다
# 값을 가져오고 싶으면 배열의 이름, 즉 첫번쨰 값의 주소값에 자료형의 크기 * 개수 만큼을 더해서 그 주소의 값을 읽으면 된다
# 메모리는 임의접근이 가능하기 때문에, 인덱싱에 O(1)의 시간이 걸린다
# 즉, 접근과 저장은 O(1), 탐색은 O(n)이 걸린다
#
# 정적배열
# 처음부터 메모리 크기를 고정하고 쓰기 때문에 추가가 불가능하다
# 추가를 위해 필요 이상으로 크게 정의하면 메모리 공간이 낭비된다
# 삽입 삭제 불가
# 삭제는 왜 불가능한가?
# 정수 4개를 담을 수 있는 배열에 2, 3, 5, 7이 저장돼 있다고 가정
# 여기서 인덱스 1에 있는 3을 지우고 싶으면 어떻게 하면 될까?
# 인덱스 3에 저장되어 있던 7을 메모리에서 자연스럽게 지울 수 있는 방법이 마땅히 없다
# 비었다는 것을 표시하기 위해서 파이썬에서는 None, 다른 언어들에서는 Null 이런 값을 넣는 걸 생각하실 수 있으나
# 이미 정수형 데이터를 4 개를 저장하는 메모리 공간을 빌렸으므로 None이나 Null은 정수형이 아니며 삭제는 불가능하다
#
# 동적배열: 객체
# 상황에 따라 크기가 변한다
# 동적 배열 객체 내부의 정적 배열이 꽉 차게 되면
# 2배정도의 크기가 되는 동적 배열을 다시 메모리(힙)에 확보하고
# 값을 전부 복사해서 사용
# 메모리 공간적으로 O(n)이 낭비된다
# 언젠가 크기가 꽉 차면 또 다시 사이즈를 확보하고 위의 상황을 반복한다
#
# 추가 연산: 여유 공간이 있다면 O(1), 여유 공간이 없다면 O(n)
# 여유 공간이 있는 경우가 대부분인데 여유 공간이 없다면 O(n)이므로 평등성을 위해
#
# 삽입 연산: 여유 공간이 있다면 O(n), 여유 공간이 없다면 O(n)
#
# 삭제 연산: 제일 앞 삭제 O(n), 제일 뒤 삭제 O(1)
# 삭제를 많이 하면 적당한 비율만큼 공간이 낭비될 때 배열을 동적으로 재할당한다
#
# 삭제는 여기는 어케 가능한가?
# 동적 배열은 사용하는 배열의 크기와 사용하는 인덱스 범위를 따로 처리한다
# 동적 배열이 내부적으로 정수 4개를 저장할 수 있는 배열에 2, 3, 5, 7을 저장하고 있다고 하자
# 동적 배열에서 인덱스 1을 삭제하고 싶으면 인덱스 1에 5를 저장하고
# 인덱스 2에 7을 저장합니다
# 그럼 내부적으로는 2, 5, 7, 7 이렇게 저장되어 있을 텐데
# 그 다음에 인덱스 3에 있는 7을 지우는 게 아니라 파이썬 내부적으로
# 개발자가 접근할 수 있는 인덱스 범위를 0 ~ 2로 만들어 버립니다
# 더 이상 인덱스 3에 접근할 수 없게 만드는 것
# 실제로 인덱스 3에 어떤 값이 저장되어 있던 상관없이 개발자는 더 이상 거기 접근할 수 없다
# 동적 배열에서 접근할 수 있는 데이터가 2, 5, 7 밖에 없으니까 실질적으로 삭제됐다고 할 수 있는 거죠
#
# 결론
# 파이썬의 리스트: c의 동적 배열로 구현되어 있다!
# 파이썬의 모든 변수는 레퍼런스 변수이다
# 파이썬의 리스트에는 연속적인 메모리 공간에 레퍼런스 변수가 저장된다
# 실제로 그 레퍼런스가 가리키는 값은 공간적으로 불연속적이다
# 이러한 방식을 쓰면 하나의 배열 안에 다형성 있게 값을 저장하는게 가능해 진다